//this is the actual endpoint
// const liveEndpoint = 'https://api.peecho.com/api/printorder';

const fetch = require('node-fetch');
const { Order } = require('../models');

//testing sandbox endpoint
const testEndpoint = 'https://test.www.peecho.com/rest/v2/order/'

//TO DO: ADD TO .ENV FILE
const merchantAPIKey = '8c08b64f40ea148f01898d38d6343cbede41e15e'; 

//this call happens after user checks out with stripe and a new order is created
const printOrder = async (req, res) => {
    try {
      
      //getting from url of page, :orderid, auto generated by stripe api
      const { orderId } = req.params;
     
      //from order data
      const { quantity, imageUrl, email, shippingAddress, billingAddress, height, width } = req.body;
    
      // Retrieve the order associated with the orderId from the database
     const order = await Order.findOne({ orderId: orderId });

      // Check if the order was found in the database
     if (!order) {
      return res.status(404).json({ error: 'Order not found. Please make sure the orderId is correct.' });
     }

     // Access the artworkId from the order
    const artworkId = order.product._id;

     const headers = {
       'Content-Type': 'application/json',
       //TO DO: EDIT FOR API KEY .ENV
        Authorization: `Bearer ${merchantAPIKey}`,
      };
  
      // data to post to Peecho API 
      const payload = {
      quantity: quantity,
      merchant_api_key: merchantAPIKey, //TO DO : SWITCH TO .ENV
      offering_id: artworkId,
      order_reference: orderId, 
      file_details: {
        content_url: imageUrl,
      },
      content_width: width,
      content_height: height,
      number_of_pages: quantity,
      address_details: {
        email_address: email,
        shipping_address: shippingAddress,
        billing_address: billingAddress, 
      },
    };
  
      // API CALL
      const response = await fetch(testEndpoint, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload),
      });
      
    // Check if the response status code indicates an error
    if (!response.ok) {
      // Log the full response body
      console.error('Peecho API Error:', responseBody); 
      // Use the error code if available, otherwise 'Unknown'
      const errorCode = responseBody?.error?.code || 'Unknown';
      return res.status(response.status).json({ error: `Peecho API Error: ${errorCode}` });
    }

      // // Parse the response data
      // const orderData = await response.json();
      
      //change orderStatus field in Order
     order.orderStatus = 'In Print Queue';
     await order.save();

    // Respond with a success message or data if needed
    res.json({ message: 'Order placed successfully! Order is now in print queue.' });
    // add any other handling here
} catch (error) {
    console.error('Error making Peecho API call:', error);
    res.status(500).json({ error: 'Failed to place order. Please try again later.' });
  }
};

module.exports = {
  printOrder,
};
  



// //CHECK STATUS ROUTE - GET REQUEST
// router.get('/order/status/:orderId', async (req, res) => {
//     try {
//       const orderId = req.params.orderId;
  
//       // Retrieve the order from the database
//     const order = await Order.findOne({ order_id: orderId });
//     if (!order) {
//       return res.status(404).json({ error: 'Order not found' });
//     }

//     const url = `https://test.www.peecho.com/rest/v2/order/status?merchantApiKey=${merchantAPIKey}&orderId=${orderId}`;

//     request(url, function (error, response, body) {
//       if (error) {
//         console.error('Error:', error);
//         res.status(500).json({ error: 'Internal Server Error' });
//       } else {
//         console.log('Status:', response.statusCode);
//         console.log('Headers:', JSON.stringify(response.headers));
//         console.log('Response:', body);

//         // Update the order_status field in the database
//         const orderStatus = JSON.parse(body);
//         order.order_status = orderStatus.status; // assuming the response contains a 'status' property
//         order.save();

//         res.status(200).json({ order_status: orderStatus.status });
//       }
//     });
//   } catch (error) {
//     console.error('Error:', error);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// });
// // DISPLAY ORDER STATUS TO FRONT END

// //CANCEL ORDER - POST REQUEST ROUTE
// //if status of the order is IN_PRINT_QUEUE, you cannot cancel the order. it should show up in "details" - CREATE FRONT END MESSAGE TO THIS
// router.post('/order/cancel/:orderId', (req, res) => {
//     try {
//       const orderId = req.params.orderId;
  
//       const url = 'https://test.www.peecho.com/rest/v2/order/cancel';
  
//       const options = {
//         method: 'POST',
//         url: url,
//         headers: {
//           'Content-Type': 'application/json'
//         },
//         body: JSON.stringify({
//           merchant_api_key: merchantAPIKey,
//           order_id: orderId
//         })
//       };
  
//       request(options, async function (error, response, body) {
//         if (error) {
//           console.error('Error:', error);
//           res.status(500).json({ error: 'Internal Server Error' });
//         } else {
//           console.log('Status:', response.statusCode);
//           console.log('Headers:', JSON.stringify(response.headers));
//           console.log('Response:', body);
  
//           const responseBody = JSON.parse(body);

//           if (response.statusCode === 200) {
//             // Order cancellation successful
//             const order = await Order.findOneAndDelete({ order_id: orderId });
//             if (!order) {
//               return res.status(404).json({ error: 'Order not found' });
//             }
  
//             res.status(response.statusCode).json({ response: 'Order cancelled successfully' });
//           } else if (response.statusCode === 409) {
//             // Order cancellation not allowed
//             res.status(response.statusCode).json({ error: 'Oops! This order is in the queue to be printed, and the order can no longer be cancelled. Please contact the artist directly. Apologies for the inconvenience.' });
//           } else {
//             // Other error response
//             res.status(response.statusCode).json({ error: 'Unexpected error occurred' });
//           }
//         }
//       });
//     } catch (error) {
//       console.error('Error:', error);
//       res.status(500).json({ error: 'Internal Server Error' });
//     }
//   });

//   module.exports = {
//         paymentWebhook,
//     };